# SPARQL 질의 모음
# 온톨로지 기반 문제 진단 및 솔루션 검색

# ============================================
# 1. 크리티컬 미해결 문제 목록
# ============================================

PREFIX : <http://roarm.ai/ontology#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?problem ?name ?symptom ?created
WHERE {
  ?problem a :Problem ;
           :severity "CRITICAL" ;
           :status "OPEN" ;
           :name ?name ;
           :symptom ?symptom ;
           :createdAt ?created .
}
ORDER BY ?created

# ============================================
# 2. pxr 관련 모든 정보
# ============================================

PREFIX : <http://roarm.ai/ontology#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?entity ?type ?description
WHERE {
  {
    ?entity :relatedTo :pxr_environment_problem ;
            a ?type ;
            :description ?description .
  }
  UNION
  {
    :pxr_environment_problem :relatedTo ?entity .
    ?entity a ?type ;
            :description ?description .
  }
  UNION
  {
    ?entity :documents :pxr_environment_problem ;
            a ?type ;
            :description ?description .
  }
}

# ============================================
# 3. 문제에 대한 솔루션 검색
# ============================================

PREFIX : <http://roarm.ai/ontology#>

SELECT ?solution ?name ?successRate ?filePath
WHERE {
  :pxr_environment_problem :hasSolution ?solution .
  ?solution :name ?name ;
            :successRate ?successRate .
  OPTIONAL { ?solution :filePath ?filePath }
}
ORDER BY DESC(?successRate)

# ============================================
# 4. 재발 문제 찾기 (occurrence > 1)
# ============================================

PREFIX : <http://roarm.ai/ontology#>

SELECT ?problem ?name ?count ?severity ?status
WHERE {
  ?problem a :Problem ;
           :name ?name ;
           :occurrenceCount ?count ;
           :severity ?severity ;
           :status ?status .
  FILTER (?count > 1)
}
ORDER BY DESC(?count)

# ============================================
# 5. 특정 증상으로 문제 검색
# ============================================

PREFIX : <http://roarm.ai/ontology#>

SELECT ?problem ?name ?solution ?solutionName
WHERE {
  ?problem a :Problem ;
           :symptom ?symptom ;
           :name ?name .
  FILTER (CONTAINS(LCASE(?symptom), "modulen otfounderror"))
  
  OPTIONAL {
    ?problem :hasSolution ?solution .
    ?solution :name ?solutionName .
  }
}

# ============================================
# 6. 프리플라이트 검사 상태
# ============================================

PREFIX : <http://roarm.ai/ontology#>

SELECT ?check ?name ?status ?command
WHERE {
  ?check a :PreflightCheck ;
         :name ?name ;
         :status ?status ;
         :checkCommand ?command .
}

# ============================================
# 7. 솔루션이 구현된 스크립트 찾기
# ============================================

PREFIX : <http://roarm.ai/ontology#>

SELECT ?script ?filePath ?solution ?solutionName
WHERE {
  ?script a :Script ;
          :filePath ?filePath ;
          :implements ?solution .
  ?solution :name ?solutionName .
}

# ============================================
# 8. 문서화되지 않은 문제 찾기
# ============================================

PREFIX : <http://roarm.ai/ontology#>

SELECT ?problem ?name ?severity
WHERE {
  ?problem a :Problem ;
           :name ?name ;
           :severity ?severity .
  
  FILTER NOT EXISTS {
    ?doc :documents ?problem .
  }
}
ORDER BY ?severity

# ============================================
# 9. 충돌하는 라이브러리 찾기
# ============================================

PREFIX : <http://roarm.ai/ontology#>

SELECT ?lib1 ?lib2 ?name1 ?name2
WHERE {
  ?lib1 :conflictsWith ?lib2 ;
        :name ?name1 .
  ?lib2 :name ?name2 .
}

# ============================================
# 10. 프로젝트 전체 상태 요약
# ============================================

PREFIX : <http://roarm.ai/ontology#>

SELECT 
  (COUNT(DISTINCT ?problem) AS ?totalProblems)
  (COUNT(DISTINCT ?criticalProblem) AS ?criticalProblems)
  (COUNT(DISTINCT ?solvedProblem) AS ?solvedProblems)
  (COUNT(DISTINCT ?openProblem) AS ?openProblems)
WHERE {
  ?problem a :Problem .
  
  OPTIONAL {
    ?criticalProblem a :Problem ;
                     :severity "CRITICAL" .
  }
  
  OPTIONAL {
    ?solvedProblem a :Problem ;
                   :status "SOLVED" .
  }
  
  OPTIONAL {
    ?openProblem a :Problem ;
                 :status "OPEN" .
  }
}

# ============================================
# 11. 특정 엔티티의 모든 관계 조회
# ============================================

PREFIX : <http://roarm.ai/ontology#>

SELECT ?predicate ?object
WHERE {
  :pxr_environment_problem ?predicate ?object .
}

# ============================================
# 12. 솔루션 성공률 통계
# ============================================

PREFIX : <http://roarm.ai/ontology#>

SELECT ?solution ?name ?successRate ?scope
WHERE {
  ?solution a :Solution ;
            :name ?name ;
            :successRate ?successRate ;
            :applicationScope ?scope .
}
ORDER BY DESC(?successRate)

# ============================================
# 13. 최근 7일 내 발생한 문제
# ============================================

PREFIX : <http://roarm.ai/ontology#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?problem ?name ?severity ?created
WHERE {
  ?problem a :Problem ;
           :name ?name ;
           :severity ?severity ;
           :createdAt ?created .
  
  FILTER (?created >= "2025-10-11T00:00:00Z"^^xsd:dateTime)
}
ORDER BY DESC(?created)

# ============================================
# 14. 의존성 체인 조회
# ============================================

PREFIX : <http://roarm.ai/ontology#>

SELECT ?entity ?dependency ?depName
WHERE {
  :usd_integrity_check_script :requires+ ?dependency .
  ?dependency :name ?depName .
}

# ============================================
# 15. 문제 해결 시간 분석
# ============================================

PREFIX : <http://roarm.ai/ontology#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?problem ?name 
       ?created ?solved
       ((?solved - ?created) AS ?resolutionTime)
WHERE {
  ?problem a :Problem ;
           :name ?name ;
           :status "SOLVED" ;
           :createdAt ?created ;
           :solvedAt ?solved .
}
ORDER BY DESC(?resolutionTime)
