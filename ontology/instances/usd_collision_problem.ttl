@prefix : <http://roarm.ai/ontology#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# USD CollisionAPI 누락 문제
# 이전 프로젝트(codex_mcp)에서 발생한 CRITICAL 문제

# ============================================
# 1. 메인 문제 정의
# ============================================

:usd_collision_api_problem a :PhysicsProblem , :Problem ;
  :id "PROB-002" ;
  :name "USD CollisionAPI 누락 → PhysX 크래시" ;
  :severity "CRITICAL" ;
  :priority 1 ;
  :status "SOLVED" ;
  :occurrenceCount 1 ;
  :createdAt "2025-10-14T00:00:00Z"^^xsd:dateTime ;
  :solvedAt "2025-10-15T00:00:00Z"^^xsd:dateTime ;
  
  :symptom "GUI 재생 후 타임라인 재생 버튼 클릭 시 즉시 세그폴트" ;
  :errorMessage "Invalid PhysX transform → Illegal BroadPhaseUpdateData → 크래시" ;
  :description """
모든 로봇 링크에 충돌 형상(Collision Shape)이 없어 
PhysX BroadPhase 초기화 실패. 시뮬레이션 시작 불가능.

영향 범위:
- Headless 학습: 타임라인 자동 재생 없어 일부 우회 가능
- GUI 재생: 타임라인 재생 시 100% 크래시
- 실제 물리 검증: 충돌 없이는 정상 시뮬레이션 불가능
  """ ;
  
  :causedBy :urdf_to_usd_conversion_missing_collision ;
  :relatedTo :check_usd_integrity ;
  
  :hasSolution :add_collision_api_solution ;
  :hasSolution :urdf_improvement_solution .

# ============================================
# 2. 근본 원인
# ============================================

:urdf_to_usd_conversion_missing_collision a :USD ;
  :name "URDF → USD 변환 시 CollisionAPI 미생성" ;
  :description """
isaac-sim urdf 명령어로 변환 시:
- Visual geometry는 변환됨
- Collision geometry는 누락됨
- CollisionAPI 속성이 모든 링크에서 누락
  
결과:
/World/roarm/base_link - CollisionAPI missing
/World/roarm/link_base - CollisionAPI missing
/World/roarm/link_shoulder - CollisionAPI missing
/World/roarm/link_elbow - CollisionAPI missing
/World/roarm/link_wrist1 - CollisionAPI missing
/World/roarm/link_wrist2 - CollisionAPI missing
/World/roarm/link_gripper - CollisionAPI missing
  """ .

# ============================================
# 3. 솔루션 1: CollisionAPI 자동 추가 스크립트
# ============================================

:add_collision_api_solution a :ScriptSolution ;
  :id "SOL-002-A" ;
  :name "CollisionAPI 자동 추가 스크립트" ;
  :status "IMPLEMENTED" ;
  :successRate 0.95 ;
  :applicationScope "GLOBAL" ;
  :createdAt "2025-10-14T10:00:00Z"^^xsd:dateTime ;
  
  :description """
USD 파일을 열어 모든 Mesh 프림에 CollisionAPI를 추가하는 스크립트.

작동 방식:
1. USD Stage 로드
2. 모든 Mesh 타입 프림 순회
3. CollisionAPI.Apply(prim) 실행
4. Stage 저장

제한사항:
- 복잡한 충돌 형상은 단순화 필요
- 성능 최적화 별도 작업 필요
  """ ;
  
  :solves :usd_collision_api_problem ;
  :implements :add_collision_script ;
  :validates :usd_integrity_check .

:add_collision_script a :Script ;
  :filePath "/home/roarm_m3/roarm_isaac_clean/scripts/add_collision_api_clean.py" ;
  :name "CollisionAPI 추가 스크립트" ;
  :description "USD 파일의 모든 Mesh에 CollisionAPI 추가 (이전 프로젝트)" ;
  :status "LEGACY" .

# ============================================
# 4. 솔루션 2: URDF 개선
# ============================================

:urdf_improvement_solution a :DocumentationSolution ;
  :id "SOL-002-B" ;
  :name "URDF에 Collision 정의 추가" ;
  :status "PLANNED" ;
  :successRate 1.0 ;
  :applicationScope "GLOBAL" ;
  :createdAt "2025-10-14T12:00:00Z"^^xsd:dateTime ;
  
  :description """
URDF 파일에 <collision> 태그를 명시적으로 정의.

URDF 구조:
<link name="base_link">
  <visual>
    <geometry>
      <mesh filename="base.stl"/>
    </geometry>
  </visual>
  <collision>  <!-- 추가 필요! -->
    <geometry>
      <mesh filename="base_collision.stl"/>
    </geometry>
  </collision>
  <inertial>
    <mass value="1.0"/>
    <inertia ixx="0.01" iyy="0.01" izz="0.01"/>
  </inertial>
</link>

장점:
- 소스 레벨 해결 (근본 해결책)
- 변환 반복 시에도 유지
- 충돌 형상 최적화 가능
  """ ;
  
  :solves :usd_collision_api_problem .

# ============================================
# 5. 검증 방법
# ============================================

:usd_collision_check a :USDIntegrityCheck ;
  :name "USD CollisionAPI 검증" ;
  :checkCommand "bash devops/preflight/check_usd_integrity.sh" ;
  :description """
USD 무결성 검사의 일부:
- CollisionAPI 누락 자동 감지
- 경고 또는 실패로 리포트
  """ ;
  :relatedTo :usd_collision_api_problem .

# ============================================
# 6. 관련 문서
# ============================================

:lessons_learned_collision_section a :Document ;
  :filePath "/home/roarm_m3/roarm_isaac_clean/docs/LESSONS_LEARNED.md" ;
  :name "교훈 - USD CollisionAPI 문제" ;
  :description "LESSONS_LEARNED.md의 '문제 1: USD CollisionAPI 누락' 섹션" ;
  :documents :usd_collision_api_problem .

:issues_and_solutions_collision a :Document ;
  :filePath "/home/roarm_m3/roarm_isaac_clean/docs/ISSUES_AND_SOLUTIONS.md" ;
  :name "이슈 - CollisionAPI 관련" ;
  :description "ISSUES_AND_SOLUTIONS.md의 P0 이슈" ;
  :documents :usd_collision_api_problem .

# ============================================
# 7. 예방 체크리스트
# ============================================

:prevention_checklist_collision_1 a :Resource ;
  :name "URDF에 collision 태그 존재 확인" ;
  :checkCommand "grep -r '<collision>' assets/roarm_m3/urdf/" ;
  :description "URDF 파일에 collision 정의가 있는지 확인" .

:prevention_checklist_collision_2 a :Resource ;
  :name "USD 변환 후 즉시 검증" ;
  :checkCommand "bash devops/preflight/check_usd_integrity.sh" ;
  :description "URDF → USD 변환 직후 무결성 검사 실행" .

:prevention_checklist_collision_3 a :Resource ;
  :name "GUI 타임라인 재생 테스트" ;
  :description "GUI에서 타임라인 재생 버튼 클릭하여 크래시 여부 확인" .

# ============================================
# 8. 메트릭
# ============================================

:collision_problem_metrics a :Resource ;
  :name "CollisionAPI 문제 메트릭" ;
  :description """
이전 프로젝트(codex_mcp) 기록:
- 문제 발견: GUI 재생 시 크래시
- 디버깅 시간: 약 4시간 (PhysX 로그 분석)
- 해결 시간: 약 2시간 (스크립트 작성)
- 총 시간: 6시간

현재 프로젝트 예방:
- 프리플라이트 자동 검사로 사전 감지
- URDF 개선으로 근본 해결
- 예상 절감 시간: 95% (6시간 → 15분)
  """ .

# ============================================
# 9. 우선순위 및 상태
# ============================================

# 이 문제는 이전 프로젝트에서 발생
# 현재 프로젝트에서는 프리플라이트로 예방 중
# 상태: SOLVED (예방 시스템 구축 완료)
