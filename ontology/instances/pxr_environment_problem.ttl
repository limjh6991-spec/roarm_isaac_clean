@prefix : <http://roarm.ai/ontology#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# pxr 환경 설정 문제 인스턴스
# 실제 프로젝트에서 발생한 CRITICAL 문제의 온톨로지 표현

# ============================================
# 1. 메인 문제 정의
# ============================================

:pxr_environment_problem a :EnvironmentProblem , :Problem ;
  :id "PROB-001" ;
  :name "pxr 모듈 환경 설정 문제" ;
  :severity "CRITICAL" ;
  :priority 1 ;
  :status "SOLVED" ;
  :occurrenceCount 3 ;
  :createdAt "2025-10-17T10:00:00Z"^^xsd:dateTime ;
  :solvedAt "2025-10-17T19:30:00Z"^^xsd:dateTime ;
  :updatedAt "2025-10-18T09:00:00Z"^^xsd:dateTime ;
  
  :symptom "ModuleNotFoundError: No module named 'pxr'" ;
  :errorMessage "ModuleNotFoundError: No module named 'pxr'" ;
  :description """
pip으로 설치한 Isaac Sim 5.0에서 pxr (USD Python 바인딩) 모듈을 
import할 수 없는 문제. python.sh 런처가 없고 PYTHONPATH에 
omni.usd.libs가 포함되지 않아 발생.
  """ ;
  
  :causedBy :pip_installation_pythonpath_issue ;
  :relatedTo :usd_integrity_check ;
  :relatedTo :urdf_to_usd_conversion ;
  
  :hasSolution :isaac_python_wrapper_solution ;
  :hasSolution :manual_env_setup_solution .

# ============================================
# 2. 근본 원인
# ============================================

:pip_installation_pythonpath_issue a :Environment ;
  :name "pip 설치 방식의 PYTHONPATH 구조 차이" ;
  :description """
pip install isaacsim으로 설치한 경우:
- python.sh 런처가 없음
- pxr 모듈이 omni.usd.libs-*/pxr 경로에 위치
- 기본 PYTHONPATH에 포함되지 않음
- LD_LIBRARY_PATH도 /bin 디렉토리로 설정 필요 (/lib64 아님!)
  """ .

:abi_incompatibility_issue a :Library ;
  :name "usd-core ABI 불일치" ;
  :description """
PyPI의 usd-core는 Isaac Sim 번들과 ABI가 다름:
- 컴파일러 버전 차이
- 빌드 설정 차이
- PhysxSchema 등 Isaac 전용 스키마 누락
→ pip install usd-core 절대 금지!
  """ ;
  :conflictsWith :isaac_bundled_pxr .

:isaac_bundled_pxr a :Library ;
  :name "Isaac Sim 번들 pxr 모듈" ;
  :filePath "~/isaacsim-venv/lib/python3.11/site-packages/isaacsim/extscache/omni.usd.libs-1.0.1+8131b85d.lx64.r.cp311/pxr" ;
  :description "Isaac Sim에 번들된 USD Python 바인딩 (유일한 올바른 pxr)" .

# ============================================
# 3. 솔루션 1: isaac_python.sh 래퍼 (권장)
# ============================================

:isaac_python_wrapper_solution a :ScriptSolution ;
  :id "SOL-001-A" ;
  :name "isaac_python.sh 래퍼 스크립트" ;
  :status "DEPLOYED" ;
  :successRate 1.0 ;
  :applicationScope "GLOBAL" ;
  :createdAt "2025-10-17T15:00:00Z"^^xsd:dateTime ;
  
  :description """
pxr 환경 변수를 자동으로 설정하는 Bash 래퍼 스크립트.
PYTHONPATH와 LD_LIBRARY_PATH를 omni.usd.libs 경로로 자동 설정 후 
Python을 exec로 실행.
  """ ;
  
  :solves :pxr_environment_problem ;
  :implements :isaac_python_script ;
  :validates :usd_integrity_check_script ;
  
  :requires :isaac_bundled_pxr ;
  :requires :bash_shell .

:isaac_python_script a :Script ;
  :filePath "/home/roarm_m3/roarm_isaac_clean/devops/isaac_python.sh" ;
  :description "pxr 환경 자동 설정 래퍼" ;
  :implements :isaac_python_wrapper_solution ;
  
  :checkCommand "bash devops/isaac_python.sh -c 'import pxr; print(pxr.__file__)'" ;
  :expectedOutput "omni.usd.libs.*pxr/__init__.py" .

# ============================================
# 4. 솔루션 2: 수동 환경 변수 설정
# ============================================

:manual_env_setup_solution a :ConfigurationSolution ;
  :id "SOL-001-B" ;
  :name "수동 PYTHONPATH/LD_LIBRARY_PATH 설정" ;
  :status "DOCUMENTED" ;
  :successRate 0.8 ;
  :applicationScope "LOCAL" ;
  :createdAt "2025-10-17T16:00:00Z"^^xsd:dateTime ;
  
  :description """
환경 변수를 수동으로 설정하는 방법:
1. omni.usd.libs 경로 찾기
2. PYTHONPATH에 추가
3. LD_LIBRARY_PATH에 .../bin 추가 (주의: /lib64 아님!)
4. Python 실행
  """ ;
  
  :solves :pxr_environment_problem ;
  :documents :pxr_environment_guide .

# ============================================
# 5. 문서 리소스
# ============================================

:pxr_environment_guide a :Document ;
  :filePath "/home/roarm_m3/roarm_isaac_clean/docs/PXR_ENVIRONMENT_GUIDE.md" ;
  :name "pxr 환경 설정 완전 가이드" ;
  :description """
pxr 모듈 환경 설정의 모든 것:
- pip install usd-core 금지 이유
- PYTHONPATH + LD_LIBRARY_PATH 설정 방법
- 4가지 트러블슈팅 시나리오
- 진단 도구 및 검증 방법
  """ ;
  :severity "CRITICAL" ;
  :priority 1 ;
  :createdAt "2025-10-18T09:00:00Z"^^xsd:dateTime ;
  
  :documents :pxr_environment_problem ;
  :documents :isaac_python_wrapper_solution ;
  :documents :manual_env_setup_solution .

:devops_guide_pxr_section a :Document ;
  :filePath "/home/roarm_m3/roarm_isaac_clean/docs/DEVOPS_GUIDE.md" ;
  :name "DevOps 가이드 - pxr 섹션" ;
  :description "DEVOPS_GUIDE.md의 '⚠️ CRITICAL: pxr 모듈 환경 설정' 섹션" ;
  :documents :pxr_environment_problem .

:lessons_learned_pxr_section a :Document ;
  :filePath "/home/roarm_m3/roarm_isaac_clean/docs/LESSONS_LEARNED.md" ;
  :name "교훈 - pxr 문제" ;
  :description "LESSONS_LEARNED.md의 '문제 4: pip 설치 시 pxr 모듈 환경 설정' 섹션" ;
  :documents :pxr_environment_problem .

# ============================================
# 6. 관련 스크립트 및 도구
# ============================================

:usd_integrity_check_script a :Script ;
  :filePath "/home/roarm_m3/roarm_isaac_clean/devops/preflight/check_usd_integrity.sh" ;
  :name "USD 무결성 검사" ;
  :description """
USD 파일 검증 스크립트. pxr 모듈 사용 필수.
find_isaac_python() 함수로 설치 타입 자동 감지.
  """ ;
  
  :requires :isaac_bundled_pxr ;
  :relatedTo :pxr_environment_problem ;
  :hasProblem :pxr_environment_problem .

:bash_shell a :SystemComponent ;
  :name "Bash Shell" ;
  :version "5.x" .

# ============================================
# 7. 관련 검사
# ============================================

:usd_integrity_check a :USDIntegrityCheck ;
  :name "USD Integrity Check" ;
  :checkCommand "bash devops/preflight/check_usd_integrity.sh assets/roarm_m3/usd/roarm_m3.usd" ;
  :description "USD Stage 메타데이터, PhysX Articulation, 스키마 검증" ;
  
  :requires :isaac_bundled_pxr ;
  :relatedTo :pxr_environment_problem .

# ============================================
# 8. 관련 엔티티
# ============================================

:urdf_to_usd_conversion a :DevelopmentPhase ;
  :name "URDF to USD Conversion" ;
  :description "URDF 파일을 USD 형식으로 변환" ;
  :requires :isaac_bundled_pxr ;
  :relatedTo :pxr_environment_problem .

# ============================================
# 9. 재발 방지 체크리스트
# ============================================

:prevention_checklist_item_1 a :Resource ;
  :name "Isaac Sim venv 활성화 확인" ;
  :checkCommand "which python | grep isaacsim-venv" ;
  :description "시스템 Python이 아닌 Isaac venv 사용 확인" .

:prevention_checklist_item_2 a :Resource ;
  :name "pip install usd-core 금지 확인" ;
  :checkCommand "pip list | grep usd-core" ;
  :expectedOutput "empty (usd-core가 없어야 정상)" ;
  :description "PyPI usd-core가 설치되지 않았는지 확인" .

:prevention_checklist_item_3 a :Resource ;
  :name "pxr 모듈 위치 확인" ;
  :checkCommand "python -c 'import importlib.util; print(importlib.util.find_spec(\"pxr.Usd\").origin)'" ;
  :expectedOutput "omni.usd.libs.*pxr/Usd/_usd.so" ;
  :description "pxr가 Isaac 번들에서 로드되는지 확인" .

:prevention_checklist_item_4 a :Resource ;
  :name "래퍼 스크립트 사용 확인" ;
  :checkCommand "grep -r 'python.*\\.py' devops/ | grep -v isaac_python.sh" ;
  :description "직접 python 호출 대신 isaac_python.sh 사용 확인" .

# ============================================
# 10. 메트릭
# ============================================

:pxr_problem_metrics a :Resource ;
  :name "pxr 문제 해결 메트릭" ;
  :description """
Before:
- 진단 시간: 30분
- 솔루션 검색: 15분
- 재발 시 해결: 20분
- 총 시간: 65분

After (isaac_python.sh 래퍼 도입):
- 진단 시간: 1분
- 솔루션 적용: 10초
- 재발 시 해결: 30초
- 총 시간: 2분

효율 향상: 97% (65분 → 2분)
  """ .
